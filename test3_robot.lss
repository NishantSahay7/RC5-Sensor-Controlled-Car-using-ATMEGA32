
test3_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000007aa  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009c  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004b7  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028e  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000065f  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f6  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002e6  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  7a:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pwm_init>:
void pwm_init()
{



	TCCR0=0x69;	
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
  86:	bb 9a       	sbi	0x17, 3	; 23
}
  88:	08 95       	ret

0000008a <pwm>:



void pwm(uint8_t duty)
{
	OCR0=duty;
  8a:	8c bf       	out	0x3c, r24	; 60
	
}
  8c:	08 95       	ret

0000008e <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "pwm.h"

int main()
{
  8e:	6f 92       	push	r6
  90:	7f 92       	push	r7
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
void pwm_init()
{



	TCCR0=0x69;	
  ba:	89 e6       	ldi	r24, 0x69	; 105
  bc:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
  be:	bb 9a       	sbi	0x17, 3	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	30 ed       	ldi	r19, 0xD0	; 208
  c2:	83 2e       	mov	r8, r19
  c4:	37 e0       	ldi	r19, 0x07	; 7
  c6:	93 2e       	mov	r9, r19
  c8:	5e 01       	movw	r10, r28
  ca:	08 94       	sec
  cc:	a1 1c       	adc	r10, r1
  ce:	b1 1c       	adc	r11, r1
			for(int i=0;i<14;i++)
			{
				if(read(portc,0)==1)
				{ 
				
					a[i] = 1;
  d0:	66 24       	eor	r6, r6
  d2:	63 94       	inc	r6
  d4:	24 ec       	ldi	r18, 0xC4	; 196
  d6:	c2 2e       	mov	r12, r18
  d8:	2b e1       	ldi	r18, 0x1B	; 27
  da:	d2 2e       	mov	r13, r18
	{
	if(read(portc,0)==1)	//Reading vlaues from RC5 sensor, Connection: RC_Sensor Port c Pin 0
		{
			_delay_us(500);
			
			for(int i=0;i<14;i++)
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	e9 2e       	mov	r14, r25
  e0:	f1 2c       	mov	r15, r1
  e2:	ec 0e       	add	r14, r28
  e4:	fd 1e       	adc	r15, r29



void pwm(uint8_t duty)
{
	OCR0=duty;
  e6:	84 eb       	ldi	r24, 0xB4	; 180
  e8:	78 2e       	mov	r7, r24
	pwm_init();
	
	char a[14],z;
	while (1)
	{
	if(read(portc,0)==1)	//Reading vlaues from RC5 sensor, Connection: RC_Sensor Port c Pin 0
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 45 01 	call	0x28a	; 0x28a <read>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	c1 f7       	brne	.-16     	; 0xea <main+0x5c>
  fa:	c4 01       	movw	r24, r8
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6e>
 100:	85 01       	movw	r16, r10
		{
			_delay_us(500);
			
			for(int i=0;i<14;i++)
			{
				if(read(portc,0)==1)
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 45 01 	call	0x28a	; 0x28a <read>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	19 f4       	brne	.+6      	; 0x118 <main+0x8a>
				{ 
				
					a[i] = 1;
 112:	f8 01       	movw	r30, r16
 114:	60 82       	st	Z, r6
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x8e>
				
				}
				else
				{
					a[i]=0;
 118:	f8 01       	movw	r30, r16
 11a:	10 82       	st	Z, r1
 11c:	c6 01       	movw	r24, r12
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x90>
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	if(read(portc,0)==1)	//Reading vlaues from RC5 sensor, Connection: RC_Sensor Port c Pin 0
		{
			_delay_us(500);
			
			for(int i=0;i<14;i++)
 126:	0e 15       	cp	r16, r14
 128:	1f 05       	cpc	r17, r15
 12a:	59 f7       	brne	.-42     	; 0x102 <main+0x74>
					a[i]=0;
				}
				_delay_us(1777);
				
			}
		a[8]  = a[8] <<5; // left shift by 5 and so on
 12c:	59 85       	ldd	r21, Y+9	; 0x09
 12e:	52 95       	swap	r21
 130:	55 0f       	add	r21, r21
 132:	50 7e       	andi	r21, 0xE0	; 224
 134:	59 87       	std	Y+9, r21	; 0x09
		a[9]  = a[9] <<4;	//left sift by 4
 136:	4a 85       	ldd	r20, Y+10	; 0x0a
 138:	42 95       	swap	r20
 13a:	40 7f       	andi	r20, 0xF0	; 240
 13c:	4a 87       	std	Y+10, r20	; 0x0a
		a[10] = a[10]<<3;
 13e:	3b 85       	ldd	r19, Y+11	; 0x0b
 140:	33 0f       	add	r19, r19
 142:	33 0f       	add	r19, r19
 144:	33 0f       	add	r19, r19
 146:	3b 87       	std	Y+11, r19	; 0x0b
		a[11] = a[11]<<2;
 148:	2c 85       	ldd	r18, Y+12	; 0x0c
 14a:	22 0f       	add	r18, r18
 14c:	22 0f       	add	r18, r18
 14e:	2c 87       	std	Y+12, r18	; 0x0c
		a[12] = a[12]<<1;
 150:	9d 85       	ldd	r25, Y+13	; 0x0d
 152:	99 0f       	add	r25, r25
 154:	9d 87       	std	Y+13, r25	; 0x0d
		a[13] = a[13]<<0;
 156:	8e 85       	ldd	r24, Y+14	; 0x0e
		
		z=a[8] | a[9] | a[10] | a[11] | a[12] | a[13];	//Receiving value in variable z as sent by the sensor
 158:	18 2f       	mov	r17, r24
 15a:	15 2b       	or	r17, r21
 15c:	14 2b       	or	r17, r20
 15e:	13 2b       	or	r17, r19
 160:	12 2b       	or	r17, r18
 162:	19 2b       	or	r17, r25
		if(z==62);		//Sensor value for a button pressed which is defined to here in code to move in front direction
		{
	
		//Turning ON Motor 1 & Motor 2, by giving HIGH from one pin and low signal from other pin such the two pins act like a Bettery of 5v
		
			write(portd,4,h);	
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	0e 94 b1 01 	call	0x362	; 0x362 <write>
			write(portd,5,l);	
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	0e 94 b1 01 	call	0x362	; 0x362 <write>
			write(portd,6,h);	
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	66 e0       	ldi	r22, 0x06	; 6
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 b1 01 	call	0x362	; 0x362 <write>
			write(portd,7,l);
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	67 e0       	ldi	r22, 0x07	; 7
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	0e 94 b1 01 	call	0x362	; 0x362 <write>
			
		
		}
		
		if(z==52)		//52 is the value recieved and here if value = 52, turning off both the MOTORS i.e. stop the car
 1a4:	14 33       	cpi	r17, 0x34	; 52
 1a6:	b9 f4       	brne	.+46     	; 0x1d6 <main+0x148>
		{
			//Sending low signal from both the pins in order to turn the Motor off
			
				write(portd,4,l);	
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,5,l);
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	65 e0       	ldi	r22, 0x05	; 5
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,6,l);
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <main+0x19a>
				write(portd,7,l);
			
		}
		
		if(z==30)		//if value recieved = 30 turn the Car in right direction
 1d6:	1e 31       	cpi	r17, 0x1E	; 30
 1d8:	79 f4       	brne	.+30     	; 0x1f8 <main+0x16a>
		{
			//Motor 1 = left Motor, Front movement of motor 1 and back movement of motor 2 turns the Car in right direction
			
				write(portd,4,h);	
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,5,l);
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	65 e0       	ldi	r22, 0x05	; 5
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	31 c0       	rjmp	.+98     	; 0x25a <main+0x1cc>
				write(portd,6,l);
				write(portd,7,h);
		
		}
		
		if(z==28)		//if value = 28, turn the Car in left direction
 1f8:	1c 31       	cpi	r17, 0x1C	; 28
 1fa:	f9 f4       	brne	.+62     	; 0x23a <main+0x1ac>
		{
		
				write(portd,4,l);
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	64 e0       	ldi	r22, 0x04	; 4
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,5,h);
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,6,h);
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,7,l);
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	67 e0       	ldi	r22, 0x07	; 7
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	20 c0       	rjmp	.+64     	; 0x27a <main+0x1ec>
				
		}
		
		if(z==60)		//if value =60, then turn the Car Back
 23a:	1c 33       	cpi	r17, 0x3C	; 60
 23c:	09 f5       	brne	.+66     	; 0x280 <main+0x1f2>
		{
				//Turning the Motor in reverse direction
				
				write(portd,4,l);	
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,5,h);
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	65 e0       	ldi	r22, 0x05	; 5
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,6,l);
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	66 e0       	ldi	r22, 0x06	; 6
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 b1 01 	call	0x362	; 0x362 <write>
				write(portd,7,h);
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 27e:	35 cf       	rjmp	.-406    	; 0xea <main+0x5c>
			
		
		}
		
		if(z==16)
 280:	10 31       	cpi	r17, 0x10	; 16
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x1f8>
 284:	32 cf       	rjmp	.-412    	; 0xea <main+0x5c>
 286:	7c be       	out	0x3c, r7	; 60
 288:	30 cf       	rjmp	.-416    	; 0xea <main+0x5c>

0000028a <read>:
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	f9 f0       	breq	.+62     	; 0x2cc <read+0x42>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	18 f4       	brcc	.+6      	; 0x298 <read+0xe>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	31 f4       	brne	.+12     	; 0x2a2 <read+0x18>
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <read+0x1c>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	59 f1       	breq	.+86     	; 0x2f2 <read+0x68>
 29c:	84 30       	cpi	r24, 0x04	; 4
 29e:	09 f4       	brne	.+2      	; 0x2a2 <read+0x18>
 2a0:	42 c0       	rjmp	.+132    	; 0x326 <read+0x9c>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	69 30       	cpi	r22, 0x09	; 9
 2a8:	19 f4       	brne	.+6      	; 0x2b0 <read+0x26>
 2aa:	1a ba       	out	0x1a, r1	; 26
 2ac:	89 b3       	in	r24, 0x19	; 25
 2ae:	08 95       	ret
 2b0:	8a b3       	in	r24, 0x1a	; 26
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	06 2e       	mov	r0, r22
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <read+0x34>
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <read+0x30>
 2c2:	20 95       	com	r18
 2c4:	28 23       	and	r18, r24
 2c6:	2a bb       	out	0x1a, r18	; 26
 2c8:	89 b3       	in	r24, 0x19	; 25
 2ca:	25 c0       	rjmp	.+74     	; 0x316 <read+0x8c>
 2cc:	69 30       	cpi	r22, 0x09	; 9
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <read+0x4c>
 2d0:	17 ba       	out	0x17, r1	; 23
 2d2:	86 b3       	in	r24, 0x16	; 22
 2d4:	08 95       	ret
 2d6:	87 b3       	in	r24, 0x17	; 23
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	06 2e       	mov	r0, r22
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <read+0x5a>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <read+0x56>
 2e8:	20 95       	com	r18
 2ea:	28 23       	and	r18, r24
 2ec:	27 bb       	out	0x17, r18	; 23
 2ee:	86 b3       	in	r24, 0x16	; 22
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <read+0x8c>
 2f2:	69 30       	cpi	r22, 0x09	; 9
 2f4:	19 f4       	brne	.+6      	; 0x2fc <read+0x72>
 2f6:	14 ba       	out	0x14, r1	; 20
 2f8:	83 b3       	in	r24, 0x13	; 19
 2fa:	08 95       	ret
 2fc:	84 b3       	in	r24, 0x14	; 20
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	06 2e       	mov	r0, r22
 304:	02 c0       	rjmp	.+4      	; 0x30a <read+0x80>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <read+0x7c>
 30e:	20 95       	com	r18
 310:	28 23       	and	r18, r24
 312:	24 bb       	out	0x14, r18	; 20
 314:	83 b3       	in	r24, 0x13	; 19
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <read+0x94>
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <read+0x90>
 322:	81 70       	andi	r24, 0x01	; 1
 324:	08 95       	ret
 326:	69 30       	cpi	r22, 0x09	; 9
 328:	19 f4       	brne	.+6      	; 0x330 <read+0xa6>
 32a:	11 ba       	out	0x11, r1	; 17
 32c:	80 b3       	in	r24, 0x10	; 16
 32e:	08 95       	ret
 330:	31 b3       	in	r19, 0x11	; 17
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <read+0xb4>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <read+0xb0>
 342:	28 2f       	mov	r18, r24
 344:	20 95       	com	r18
 346:	23 23       	and	r18, r19
 348:	21 bb       	out	0x11, r18	; 17
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	82 2b       	or	r24, r18
 34e:	82 bb       	out	0x12, r24	; 18
 350:	80 b3       	in	r24, 0x10	; 16
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <read+0xd0>
 356:	95 95       	asr	r25
 358:	87 95       	ror	r24
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <read+0xcc>
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	08 95       	ret

00000362 <write>:
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	09 f4       	brne	.+2      	; 0x368 <write+0x6>
 366:	41 c0       	rjmp	.+130    	; 0x3ea <write+0x88>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	20 f4       	brcc	.+8      	; 0x374 <write+0x12>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <write+0x10>
 370:	d7 c0       	rjmp	.+430    	; 0x520 <write+0x1be>
 372:	07 c0       	rjmp	.+14     	; 0x382 <write+0x20>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	09 f4       	brne	.+2      	; 0x37a <write+0x18>
 378:	6c c0       	rjmp	.+216    	; 0x452 <write+0xf0>
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	09 f0       	breq	.+2      	; 0x380 <write+0x1e>
 37e:	d0 c0       	rjmp	.+416    	; 0x520 <write+0x1be>
 380:	9c c0       	rjmp	.+312    	; 0x4ba <write+0x158>
 382:	6b 35       	cpi	r22, 0x5B	; 91
 384:	21 f4       	brne	.+8      	; 0x38e <write+0x2c>
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	8a bb       	out	0x1a, r24	; 26
 38a:	4b bb       	out	0x1b, r20	; 27
 38c:	08 95       	ret
 38e:	44 23       	and	r20, r20
 390:	21 f0       	breq	.+8      	; 0x39a <write+0x38>
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	09 f0       	breq	.+2      	; 0x398 <write+0x36>
 396:	c4 c0       	rjmp	.+392    	; 0x520 <write+0x1be>
 398:	14 c0       	rjmp	.+40     	; 0x3c2 <write+0x60>
 39a:	69 30       	cpi	r22, 0x09	; 9
 39c:	21 f4       	brne	.+8      	; 0x3a6 <write+0x44>
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	8a bb       	out	0x1a, r24	; 26
 3a2:	1b ba       	out	0x1b, r1	; 27
 3a4:	08 95       	ret
 3a6:	8a b3       	in	r24, 0x1a	; 26
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <write+0x50>
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <write+0x4c>
 3b6:	82 2b       	or	r24, r18
 3b8:	8a bb       	out	0x1a, r24	; 26
 3ba:	8b b3       	in	r24, 0x1b	; 27
 3bc:	20 95       	com	r18
 3be:	28 23       	and	r18, r24
 3c0:	12 c0       	rjmp	.+36     	; 0x3e6 <write+0x84>
 3c2:	69 30       	cpi	r22, 0x09	; 9
 3c4:	21 f4       	brne	.+8      	; 0x3ce <write+0x6c>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	8a bb       	out	0x1a, r24	; 26
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	08 95       	ret
 3ce:	8a b3       	in	r24, 0x1a	; 26
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <write+0x78>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <write+0x74>
 3de:	82 2b       	or	r24, r18
 3e0:	8a bb       	out	0x1a, r24	; 26
 3e2:	8b b3       	in	r24, 0x1b	; 27
 3e4:	28 2b       	or	r18, r24
 3e6:	2b bb       	out	0x1b, r18	; 27
 3e8:	08 95       	ret
 3ea:	6b 35       	cpi	r22, 0x5B	; 91
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <write+0x94>
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	87 bb       	out	0x17, r24	; 23
 3f2:	48 bb       	out	0x18, r20	; 24
 3f4:	08 95       	ret
 3f6:	44 23       	and	r20, r20
 3f8:	21 f0       	breq	.+8      	; 0x402 <write+0xa0>
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	09 f0       	breq	.+2      	; 0x400 <write+0x9e>
 3fe:	90 c0       	rjmp	.+288    	; 0x520 <write+0x1be>
 400:	14 c0       	rjmp	.+40     	; 0x42a <write+0xc8>
 402:	69 30       	cpi	r22, 0x09	; 9
 404:	21 f4       	brne	.+8      	; 0x40e <write+0xac>
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	87 bb       	out	0x17, r24	; 23
 40a:	18 ba       	out	0x18, r1	; 24
 40c:	08 95       	ret
 40e:	87 b3       	in	r24, 0x17	; 23
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <write+0xb8>
 416:	22 0f       	add	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <write+0xb4>
 41e:	82 2b       	or	r24, r18
 420:	87 bb       	out	0x17, r24	; 23
 422:	88 b3       	in	r24, 0x18	; 24
 424:	20 95       	com	r18
 426:	28 23       	and	r18, r24
 428:	12 c0       	rjmp	.+36     	; 0x44e <write+0xec>
 42a:	69 30       	cpi	r22, 0x09	; 9
 42c:	21 f4       	brne	.+8      	; 0x436 <write+0xd4>
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	87 bb       	out	0x17, r24	; 23
 432:	88 bb       	out	0x18, r24	; 24
 434:	08 95       	ret
 436:	87 b3       	in	r24, 0x17	; 23
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <write+0xe0>
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <write+0xdc>
 446:	82 2b       	or	r24, r18
 448:	87 bb       	out	0x17, r24	; 23
 44a:	88 b3       	in	r24, 0x18	; 24
 44c:	28 2b       	or	r18, r24
 44e:	28 bb       	out	0x18, r18	; 24
 450:	08 95       	ret
 452:	6b 35       	cpi	r22, 0x5B	; 91
 454:	21 f4       	brne	.+8      	; 0x45e <write+0xfc>
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	84 bb       	out	0x14, r24	; 20
 45a:	45 bb       	out	0x15, r20	; 21
 45c:	08 95       	ret
 45e:	44 23       	and	r20, r20
 460:	21 f0       	breq	.+8      	; 0x46a <write+0x108>
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <write+0x106>
 466:	5c c0       	rjmp	.+184    	; 0x520 <write+0x1be>
 468:	14 c0       	rjmp	.+40     	; 0x492 <write+0x130>
 46a:	69 30       	cpi	r22, 0x09	; 9
 46c:	21 f4       	brne	.+8      	; 0x476 <write+0x114>
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	84 bb       	out	0x14, r24	; 20
 472:	15 ba       	out	0x15, r1	; 21
 474:	08 95       	ret
 476:	84 b3       	in	r24, 0x14	; 20
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <write+0x120>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <write+0x11c>
 486:	82 2b       	or	r24, r18
 488:	84 bb       	out	0x14, r24	; 20
 48a:	85 b3       	in	r24, 0x15	; 21
 48c:	20 95       	com	r18
 48e:	28 23       	and	r18, r24
 490:	12 c0       	rjmp	.+36     	; 0x4b6 <write+0x154>
 492:	69 30       	cpi	r22, 0x09	; 9
 494:	21 f4       	brne	.+8      	; 0x49e <write+0x13c>
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	84 bb       	out	0x14, r24	; 20
 49a:	85 bb       	out	0x15, r24	; 21
 49c:	08 95       	ret
 49e:	84 b3       	in	r24, 0x14	; 20
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <write+0x148>
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <write+0x144>
 4ae:	82 2b       	or	r24, r18
 4b0:	84 bb       	out	0x14, r24	; 20
 4b2:	85 b3       	in	r24, 0x15	; 21
 4b4:	28 2b       	or	r18, r24
 4b6:	25 bb       	out	0x15, r18	; 21
 4b8:	08 95       	ret
 4ba:	6b 35       	cpi	r22, 0x5B	; 91
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <write+0x164>
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	81 bb       	out	0x11, r24	; 17
 4c2:	42 bb       	out	0x12, r20	; 18
 4c4:	08 95       	ret
 4c6:	44 23       	and	r20, r20
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <write+0x16e>
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	49 f5       	brne	.+82     	; 0x520 <write+0x1be>
 4ce:	15 c0       	rjmp	.+42     	; 0x4fa <write+0x198>
 4d0:	69 30       	cpi	r22, 0x09	; 9
 4d2:	21 f4       	brne	.+8      	; 0x4dc <write+0x17a>
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	81 bb       	out	0x11, r24	; 17
 4d8:	12 ba       	out	0x12, r1	; 18
 4da:	08 95       	ret
 4dc:	81 b3       	in	r24, 0x11	; 17
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <write+0x186>
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <write+0x182>
 4ec:	82 2b       	or	r24, r18
 4ee:	81 bb       	out	0x11, r24	; 17
 4f0:	82 b3       	in	r24, 0x12	; 18
 4f2:	20 95       	com	r18
 4f4:	28 23       	and	r18, r24
 4f6:	22 bb       	out	0x12, r18	; 18
 4f8:	08 95       	ret
 4fa:	69 30       	cpi	r22, 0x09	; 9
 4fc:	21 f4       	brne	.+8      	; 0x506 <write+0x1a4>
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	81 bb       	out	0x11, r24	; 17
 502:	82 bb       	out	0x12, r24	; 18
 504:	08 95       	ret
 506:	81 b3       	in	r24, 0x11	; 17
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <write+0x1b0>
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <write+0x1ac>
 516:	82 2b       	or	r24, r18
 518:	81 bb       	out	0x11, r24	; 17
 51a:	82 b3       	in	r24, 0x12	; 18
 51c:	28 2b       	or	r18, r24
 51e:	22 bb       	out	0x12, r18	; 18
 520:	08 95       	ret

00000522 <direction>:
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	19 f1       	breq	.+70     	; 0x56c <direction+0x4a>
 526:	84 30       	cpi	r24, 0x04	; 4
 528:	09 f4       	brne	.+2      	; 0x52c <direction+0xa>
 52a:	3c c0       	rjmp	.+120    	; 0x5a4 <direction+0x82>
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	09 f0       	breq	.+2      	; 0x532 <direction+0x10>
 530:	54 c0       	rjmp	.+168    	; 0x5da <direction+0xb8>
 532:	44 23       	and	r20, r20
 534:	21 f0       	breq	.+8      	; 0x53e <direction+0x1c>
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	09 f0       	breq	.+2      	; 0x53c <direction+0x1a>
 53a:	4f c0       	rjmp	.+158    	; 0x5da <direction+0xb8>
 53c:	0c c0       	rjmp	.+24     	; 0x556 <direction+0x34>
 53e:	27 b3       	in	r18, 0x17	; 23
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <direction+0x28>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <direction+0x24>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	87 bb       	out	0x17, r24	; 23
 554:	08 95       	ret
 556:	27 b3       	in	r18, 0x17	; 23
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <direction+0x40>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <direction+0x3c>
 566:	28 2b       	or	r18, r24
 568:	27 bb       	out	0x17, r18	; 23
 56a:	08 95       	ret
 56c:	44 23       	and	r20, r20
 56e:	19 f0       	breq	.+6      	; 0x576 <direction+0x54>
 570:	41 30       	cpi	r20, 0x01	; 1
 572:	99 f5       	brne	.+102    	; 0x5da <direction+0xb8>
 574:	0c c0       	rjmp	.+24     	; 0x58e <direction+0x6c>
 576:	24 b3       	in	r18, 0x14	; 20
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <direction+0x60>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <direction+0x5c>
 586:	80 95       	com	r24
 588:	82 23       	and	r24, r18
 58a:	84 bb       	out	0x14, r24	; 20
 58c:	08 95       	ret
 58e:	24 b3       	in	r18, 0x14	; 20
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <direction+0x78>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <direction+0x74>
 59e:	28 2b       	or	r18, r24
 5a0:	24 bb       	out	0x14, r18	; 20
 5a2:	08 95       	ret
 5a4:	44 23       	and	r20, r20
 5a6:	19 f0       	breq	.+6      	; 0x5ae <direction+0x8c>
 5a8:	41 30       	cpi	r20, 0x01	; 1
 5aa:	b9 f4       	brne	.+46     	; 0x5da <direction+0xb8>
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <direction+0xa4>
 5ae:	21 b3       	in	r18, 0x11	; 17
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <direction+0x98>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <direction+0x94>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	81 bb       	out	0x11, r24	; 17
 5c4:	08 95       	ret
 5c6:	21 b3       	in	r18, 0x11	; 17
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <direction+0xb0>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <direction+0xac>
 5d6:	28 2b       	or	r18, r24
 5d8:	21 bb       	out	0x11, r18	; 17
 5da:	08 95       	ret

000005dc <serial_select>:
 5dc:	88 23       	and	r24, r24
 5de:	21 f4       	brne	.+8      	; 0x5e8 <serial_select+0xc>
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	67 e0       	ldi	r22, 0x07	; 7
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <serial_select+0x14>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	41 f4       	brne	.+16     	; 0x5fc <serial_select+0x20>
 5ec:	67 e0       	ldi	r22, 0x07	; 7
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <serial_select+0x34>
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	59 f4       	brne	.+22     	; 0x616 <serial_select+0x3a>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	67 e0       	ldi	r22, 0x07	; 7
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	41 e0       	ldi	r20, 0x01	; 1
 610:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 614:	08 95       	ret
 616:	83 30       	cpi	r24, 0x03	; 3
 618:	51 f4       	brne	.+20     	; 0x62e <serial_select+0x52>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	67 e0       	ldi	r22, 0x07	; 7
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 624:	83 e0       	ldi	r24, 0x03	; 3
 626:	62 e0       	ldi	r22, 0x02	; 2
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	0e 94 b1 01 	call	0x362	; 0x362 <write>
 62e:	08 95       	ret

00000630 <jsonparser>:
 630:	ef 92       	push	r14
 632:	ff 92       	push	r15
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	ea 01       	movw	r28, r20
 63e:	0e 94 b1 03 	call	0x762	; 0x762 <strstr>
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	19 f4       	brne	.+6      	; 0x64c <jsonparser+0x1c>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	1d c0       	rjmp	.+58     	; 0x686 <jsonparser+0x56>
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	60 e6       	ldi	r22, 0x60	; 96
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	0e 94 b1 03 	call	0x762	; 0x762 <strstr>
 656:	7c 01       	movw	r14, r24
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	e8 0e       	add	r14, r24
 65e:	f9 1e       	adc	r15, r25
 660:	c7 01       	movw	r24, r14
 662:	62 e2       	ldi	r22, 0x22	; 34
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	0e 94 7f 03 	call	0x6fe	; 0x6fe <strchr>
 66a:	8c 01       	movw	r16, r24
 66c:	0e 19       	sub	r16, r14
 66e:	1f 09       	sbc	r17, r15
 670:	ce 01       	movw	r24, r28
 672:	b7 01       	movw	r22, r14
 674:	a8 01       	movw	r20, r16
 676:	0e 94 a2 03 	call	0x744	; 0x744 <strncpy>
 67a:	0c 0f       	add	r16, r28
 67c:	1d 1f       	adc	r17, r29
 67e:	f8 01       	movw	r30, r16
 680:	10 82       	st	Z, r1
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	c9 01       	movw	r24, r18
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	08 95       	ret

00000696 <compare>:
 696:	db 01       	movw	r26, r22
 698:	0d 90       	ld	r0, X+
 69a:	00 20       	and	r0, r0
 69c:	e9 f7       	brne	.-6      	; 0x698 <compare+0x2>
 69e:	11 97       	sbiw	r26, 0x01	; 1
 6a0:	a6 1b       	sub	r26, r22
 6a2:	b7 0b       	sbc	r27, r23
 6a4:	4a 2f       	mov	r20, r26
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 8a 03 	call	0x714	; 0x714 <strncasecmp>
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	89 2b       	or	r24, r25
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <compare+0x22>
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	c9 01       	movw	r24, r18
 6ba:	08 95       	ret

000006bc <str_num>:
 6bc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <atoi>
 6c0:	08 95       	ret

000006c2 <atoi>:
 6c2:	fc 01       	movw	r30, r24
 6c4:	88 27       	eor	r24, r24
 6c6:	99 27       	eor	r25, r25
 6c8:	e8 94       	clt
 6ca:	21 91       	ld	r18, Z+
 6cc:	20 32       	cpi	r18, 0x20	; 32
 6ce:	e9 f3       	breq	.-6      	; 0x6ca <atoi+0x8>
 6d0:	29 30       	cpi	r18, 0x09	; 9
 6d2:	10 f0       	brcs	.+4      	; 0x6d8 <atoi+0x16>
 6d4:	2e 30       	cpi	r18, 0x0E	; 14
 6d6:	c8 f3       	brcs	.-14     	; 0x6ca <atoi+0x8>
 6d8:	2b 32       	cpi	r18, 0x2B	; 43
 6da:	41 f0       	breq	.+16     	; 0x6ec <atoi+0x2a>
 6dc:	2d 32       	cpi	r18, 0x2D	; 45
 6de:	39 f4       	brne	.+14     	; 0x6ee <atoi+0x2c>
 6e0:	68 94       	set
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <atoi+0x2a>
 6e4:	0e 94 cb 03 	call	0x796	; 0x796 <__mulhi_const_10>
 6e8:	82 0f       	add	r24, r18
 6ea:	91 1d       	adc	r25, r1
 6ec:	21 91       	ld	r18, Z+
 6ee:	20 53       	subi	r18, 0x30	; 48
 6f0:	2a 30       	cpi	r18, 0x0A	; 10
 6f2:	c0 f3       	brcs	.-16     	; 0x6e4 <atoi+0x22>
 6f4:	1e f4       	brtc	.+6      	; 0x6fc <atoi+0x3a>
 6f6:	90 95       	com	r25
 6f8:	81 95       	neg	r24
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <strchr>:
 6fe:	fc 01       	movw	r30, r24
 700:	81 91       	ld	r24, Z+
 702:	86 17       	cp	r24, r22
 704:	21 f0       	breq	.+8      	; 0x70e <strchr+0x10>
 706:	88 23       	and	r24, r24
 708:	d9 f7       	brne	.-10     	; 0x700 <strchr+0x2>
 70a:	99 27       	eor	r25, r25
 70c:	08 95       	ret
 70e:	31 97       	sbiw	r30, 0x01	; 1
 710:	cf 01       	movw	r24, r30
 712:	08 95       	ret

00000714 <strncasecmp>:
 714:	fb 01       	movw	r30, r22
 716:	dc 01       	movw	r26, r24
 718:	41 50       	subi	r20, 0x01	; 1
 71a:	50 40       	sbci	r21, 0x00	; 0
 71c:	88 f0       	brcs	.+34     	; 0x740 <strncasecmp+0x2c>
 71e:	8d 91       	ld	r24, X+
 720:	81 34       	cpi	r24, 0x41	; 65
 722:	1c f0       	brlt	.+6      	; 0x72a <strncasecmp+0x16>
 724:	8b 35       	cpi	r24, 0x5B	; 91
 726:	0c f4       	brge	.+2      	; 0x72a <strncasecmp+0x16>
 728:	80 5e       	subi	r24, 0xE0	; 224
 72a:	61 91       	ld	r22, Z+
 72c:	61 34       	cpi	r22, 0x41	; 65
 72e:	1c f0       	brlt	.+6      	; 0x736 <strncasecmp+0x22>
 730:	6b 35       	cpi	r22, 0x5B	; 91
 732:	0c f4       	brge	.+2      	; 0x736 <strncasecmp+0x22>
 734:	60 5e       	subi	r22, 0xE0	; 224
 736:	86 1b       	sub	r24, r22
 738:	61 11       	cpse	r22, r1
 73a:	71 f3       	breq	.-36     	; 0x718 <strncasecmp+0x4>
 73c:	99 0b       	sbc	r25, r25
 73e:	08 95       	ret
 740:	88 1b       	sub	r24, r24
 742:	fc cf       	rjmp	.-8      	; 0x73c <strncasecmp+0x28>

00000744 <strncpy>:
 744:	fb 01       	movw	r30, r22
 746:	dc 01       	movw	r26, r24
 748:	41 50       	subi	r20, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	48 f0       	brcs	.+18     	; 0x760 <strncpy+0x1c>
 74e:	01 90       	ld	r0, Z+
 750:	0d 92       	st	X+, r0
 752:	00 20       	and	r0, r0
 754:	c9 f7       	brne	.-14     	; 0x748 <strncpy+0x4>
 756:	01 c0       	rjmp	.+2      	; 0x75a <strncpy+0x16>
 758:	1d 92       	st	X+, r1
 75a:	41 50       	subi	r20, 0x01	; 1
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	e0 f7       	brcc	.-8      	; 0x758 <strncpy+0x14>
 760:	08 95       	ret

00000762 <strstr>:
 762:	fb 01       	movw	r30, r22
 764:	51 91       	ld	r21, Z+
 766:	55 23       	and	r21, r21
 768:	a9 f0       	breq	.+42     	; 0x794 <strstr+0x32>
 76a:	bf 01       	movw	r22, r30
 76c:	dc 01       	movw	r26, r24
 76e:	4d 91       	ld	r20, X+
 770:	45 17       	cp	r20, r21
 772:	41 11       	cpse	r20, r1
 774:	e1 f7       	brne	.-8      	; 0x76e <strstr+0xc>
 776:	59 f4       	brne	.+22     	; 0x78e <strstr+0x2c>
 778:	cd 01       	movw	r24, r26
 77a:	01 90       	ld	r0, Z+
 77c:	00 20       	and	r0, r0
 77e:	49 f0       	breq	.+18     	; 0x792 <strstr+0x30>
 780:	4d 91       	ld	r20, X+
 782:	40 15       	cp	r20, r0
 784:	41 11       	cpse	r20, r1
 786:	c9 f3       	breq	.-14     	; 0x77a <strstr+0x18>
 788:	fb 01       	movw	r30, r22
 78a:	41 11       	cpse	r20, r1
 78c:	ef cf       	rjmp	.-34     	; 0x76c <strstr+0xa>
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	01 97       	sbiw	r24, 0x01	; 1
 794:	08 95       	ret

00000796 <__mulhi_const_10>:
 796:	7a e0       	ldi	r23, 0x0A	; 10
 798:	97 9f       	mul	r25, r23
 79a:	90 2d       	mov	r25, r0
 79c:	87 9f       	mul	r24, r23
 79e:	80 2d       	mov	r24, r0
 7a0:	91 0d       	add	r25, r1
 7a2:	11 24       	eor	r1, r1
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
